import java.util.Random;

/*
 * Ifra Inam
 * ICS4UE
 * 2023-08-15
 * Mr.Diakoloukas 
 * Purpose of Program: To allow users to choose the length of an array consisting of random generated numbers, where they can sort the numbers given 4 options and in either ascending or descending order
 */

/**
 *
 * @author Ifra Inam
 */
public class U3A2_IfraInam extends javax.swing.JFrame {

    /**
     * Creates new form U3A2_IfraInam
     */
    public U3A2_IfraInam() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        lblSortingRoutines = new javax.swing.JLabel();
        lblnstructions = new javax.swing.JLabel();
        lblSortingAlgorithm = new javax.swing.JLabel();
        rbtnBubble = new javax.swing.JRadioButton();
        rbtnInsertion = new javax.swing.JRadioButton();
        rbtnQuick = new javax.swing.JRadioButton();
        rbtnDescending = new javax.swing.JRadioButton();
        rbtnAscending = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        lblNumToSort = new javax.swing.JLabel();
        txtNumToSort = new javax.swing.JTextField();
        btnSortNumbers = new javax.swing.JButton();
        lblOriginalNumbers = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOriginalNumbers = new javax.swing.JTextArea();
        lblSortedNumbers = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSortedNumbers = new javax.swing.JTextArea();
        rbtnSelection = new javax.swing.JRadioButton();
        txtError = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu1 = new javax.swing.JMenu();
        menu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sorting Routines");
        setBackground(new java.awt.Color(255, 255, 255));

        lblSortingRoutines.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSortingRoutines.setText("Sorting Routines");

        lblnstructions.setText("Enter the following information:");

        lblSortingAlgorithm.setText("Sorting Algorithm");

        buttonGroup1.add(rbtnBubble);
        rbtnBubble.setText("Bubble");

        buttonGroup1.add(rbtnInsertion);
        rbtnInsertion.setText("Insertion");

        buttonGroup1.add(rbtnQuick);
        rbtnQuick.setText("Quick");

        buttonGroup2.add(rbtnDescending);
        rbtnDescending.setText("Descending");

        buttonGroup2.add(rbtnAscending);
        rbtnAscending.setText("Ascending");

        jLabel4.setText("Sort Order");

        lblNumToSort.setText("Amount of Numbers to Sort:");

        btnSortNumbers.setText("Sort Numbers");
        btnSortNumbers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortNumbersActionPerformed(evt);
            }
        });

        lblOriginalNumbers.setText("Original Numbers");

        txtOriginalNumbers.setColumns(20);
        txtOriginalNumbers.setRows(5);
        jScrollPane1.setViewportView(txtOriginalNumbers);

        lblSortedNumbers.setText("Sorted Numbers");

        txtSortedNumbers.setColumns(20);
        txtSortedNumbers.setRows(5);
        jScrollPane2.setViewportView(txtSortedNumbers);

        buttonGroup1.add(rbtnSelection);
        rbtnSelection.setText("Selection");

        menu1.setText("File");
        jMenuBar1.add(menu1);

        menu2.setText("Help");
        jMenuBar1.add(menu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOriginalNumbers)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblNumToSort)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtNumToSort, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addComponent(btnSortNumbers))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(59, 59, 59)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblSortedNumbers)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSortingAlgorithm)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbtnQuick)
                                    .addComponent(rbtnInsertion)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rbtnSelection)
                                            .addComponent(rbtnBubble)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(175, 175, 175)
                                                .addComponent(jLabel4)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rbtnDescending)
                                            .addComponent(rbtnAscending)))))
                            .addComponent(lblnstructions)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(lblSortingRoutines))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(txtError, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(lblSortingRoutines)
                .addGap(18, 18, 18)
                .addComponent(lblnstructions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSortingAlgorithm)
                    .addComponent(rbtnSelection)
                    .addComponent(jLabel4)
                    .addComponent(rbtnAscending))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnBubble)
                    .addComponent(rbtnDescending))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnInsertion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnQuick)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumToSort)
                    .addComponent(txtNumToSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSortNumbers))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOriginalNumbers)
                    .addComponent(lblSortedNumbers))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(txtError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSortNumbersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortNumbersActionPerformed
 
        txtError.setText(""); // clears the Error text field (removes error messages once the user has corrected their input)
        txtSortedNumbers.setText(""); // clears the SortedNumbers text field every time the SortNumbers button is pressed (removes previous generated arrays from the text field, preventing multiple arrays from compiling onto each other)
        txtOriginalNumbers.setText(""); // clears the OriginalNumbers text field every time the SortNumbers button is pressed (removes previous generated arrays from the text field, preventing multiple arrays from compiling onto each other)
        
        int length = 0; // initializes the length of the array to 0
        
        try {
        String str_length = txtNumToSort.getText(); // gets the length of the array by user input
        length = Integer.parseInt(str_length); // converts the user input into an integer
        // checks if the user's input is a negative integer and outputs an error message to notify them 
        if (length < 0) { 
            txtError.setText("Please enter a positive integer.");
            return; // exits out of the method
        }
        } catch (NumberFormatException e) { // checks if the user's input is not an integer and ouputs an error message to notify them
            txtError.setText("Please enter an integer.");
        }
        // checks if the user has left any required information empty and outputs an error message to notify them
        if (rbtnSelection.isSelected() == false && rbtnBubble.isSelected() == false && rbtnInsertion.isSelected() == false && rbtnQuick.isSelected() == false || rbtnAscending.isSelected() == false && rbtnDescending.isSelected() == false) {
            txtError.setText("A piece of required information is empty.");
            return; // exits out of the method
        }
        
        int[] numbersArray = new int[length]; // creates an array where the length is given by user input
        Random random = new Random(); // creates an object of the Random class
        // variables used to set the range of the random numbers: 
        int min = -1000; // minimum value of the range
        int max = 1000; // maximum value of the range    
        // a for loop is used to add random numbers within the range into the numbersArray 
        for (int i = 0; i < numbersArray.length; i++) {
            numbersArray[i] = random.nextInt(max - min + 1) + min;
        }
        
        // outputs the unsorted array onto the OriginalNumbers text field 
        for(int i = 0; i < numbersArray.length; i++) {
            txtOriginalNumbers.append(numbersArray[i] + "\n");
        }  
        
        // if the user chose the Slection button, the array is sorted via Selection Sort 
        if (rbtnSelection.isSelected()) {
            selectionSort(numbersArray); 
            order(numbersArray); 
        }
        // if the user chose the Bubble button, the array is sorted via Bubble Sort 
        else if (rbtnBubble.isSelected()) {
            bubbleSort(numbersArray);
            order(numbersArray);
        }
        // if the user chose the Insertion button, the array is sorted via Insertion Sort 
        else if (rbtnInsertion.isSelected()) {
            insertionSort(numbersArray); 
            order(numbersArray);
        } 
        // if the user chose the Quick button, the array is sorted via Quick Sort 
        else if (rbtnQuick.isSelected()) {
            quickSort(numbersArray); 
            order(numbersArray); 
        }
        
    }//GEN-LAST:event_btnSortNumbersActionPerformed

    // method to sort the array via Selection Sort
    private void selectionSort(int[] numbersArray) {
        // outer for loop iterates through the array where the current index is the current smallest number 
        for (int i = 0; i < numbersArray.length - 1; i++) {
            int min = numbersArray[i]; // stores the smallest number so far while iterating
            int indexOfMin = i; // stores the index of the current smallest number 
            // inner loop iterates through the rest of the array 
            for (int j = i + 1; j < numbersArray.length; j++) { // j is equal to the next index after i
                // if the value at index j is smaller than the min, that value becomes the new min
                if (numbersArray[j] < min) {
                    min = numbersArray[j];
                    indexOfMin = j; // stores the index of the new min
                }
            }
            swap(numbersArray, i, indexOfMin); // swaps the min with the starting number 
        } 
    }
    
    // method to sort the array via Bubble Sort
    private void bubbleSort(int[] numbersArray) {
        boolean numberSwap = true; // used to initiate the while loop
        // while loop is used to sort every single value into its correct place of the list (instead of only one value being sorted into its correct place)
        while (numberSwap) {
            numberSwap = false; // means that the array is in order 
            // during each iteration, the element of the index is compared to the one after it  
            for (int i = 0; i < numbersArray.length - 1; i++) {
                // if the number after it is smaller, the two numbers are swapped
                if (numbersArray[i] > numbersArray[i + 1]) { 
                    numberSwap = true; // means the array is not in order
                    swap(numbersArray, i, i + 1);
                }
            }
        }
    }
    
    // method to sort the array via Insertion Sort 
    private void insertionSort(int[] numbersArray) {
        for (int i = 1; i < numbersArray.length; i++) { 
            int currentValue = numbersArray[i]; // the current value is stored into a temporary variable
            int j = i - 1; // used to walk back towards the beginning of the array 
            // while loop is used to work its way towards the beginning of the array until it reaches the beginning of the array or it reaches a number that is less than the current value its looking at
            while (j >= 0 && numbersArray[j] > currentValue) { 
                numbersArray[j + 1] = numbersArray[j]; // shifts the value of j to the right
                j--; // to keep moving towards the beginning of the array, j is decremented
            }
            numbersArray[j + 1] = currentValue; // the value stored in the temporary variable is then inserted into its correct spot
        }
    }
    
    // method that overloads the quickSort method --> only called to initiate the quick sort
    private void quickSort(int[] numbersArray) {
        quickSort(numbersArray, 0, numbersArray.length - 1); // calls the other quickSort method to actually sort the array
    }
    
    // method to sort the array via Quick Sort
    private void quickSort(int[] numbersArray, int lowIndex, int highIndex) {
        // if a subarray contains only one element, it just returns
        if (lowIndex >= highIndex) {
            return; 
        }
        int pivotIndex = new Random().nextInt(highIndex - lowIndex) + lowIndex; // chooses a random index between the high and low index to be the pivot
        int pivot = numbersArray[pivotIndex]; // gets the element of the pivotIndex
        swap(numbersArray, pivotIndex, highIndex); // the pivot is swapped with the value at the high index
        
        int leftPointer = partition(lowIndex, highIndex, numbersArray, pivot); // calls the partition method
        
        quickSort(numbersArray, lowIndex, leftPointer - 1); // recursively quick sorts the parition to the left of the pivot 
        quickSort(numbersArray, leftPointer + 1, highIndex); // recursively quick sorts the parition to the right of the pivot 
    }

    // method for paritioning used in the quickSort method
    private int partition(int lowIndex, int highIndex, int[] numbersArray, int pivot) {
        int leftPointer = lowIndex; // the left pointer starts at the low index
        int rightPointer = highIndex; // the right pointer starts at the high index
        // while loop is used to move the left and right pointers towards each other until they hit each other
        while (leftPointer < rightPointer) {
            // while loop is used to keep moving the leftPointer until it reaches a number higher than the pivot or it hits the rightPointer
            while (numbersArray[leftPointer] <= pivot && leftPointer < rightPointer) {
                leftPointer++; // increments the leftPointer
            }
            // while loop is used to keep moving the rightPointer until it reaches a number lower than the pivot or it hits the leftPointer
            while (numbersArray[rightPointer] >= pivot && leftPointer < rightPointer) {
                rightPointer--; // decrements the rightPointer
            }
            
            swap(numbersArray, leftPointer, rightPointer); // swaps the left and right pointer 
        }
        swap(numbersArray, leftPointer, highIndex); // swaps the pivot and the leftPointer 
        return leftPointer; 
    }
    
    // method used to swap two numbers in a list 
    private void swap(int[] numbersArray, int a, int b) {
        int temp = numbersArray[a]; // temp variable used to temporarily hold the index of a
        numbersArray[a] = numbersArray[b]; // a switches it's index to the index of b
        numbersArray[b] = temp; // b is equal to temp meaning it is now at the prvious index of a 
    }
   
    // method used to display the sorted list in either ascending or descending order 
    private void order(int [] numbersArray) {
        // if the user presses the Ascending button:
        if (rbtnAscending.isSelected()) {
            // a for loop is used to iterate through the array starting from the 0th index (holds the smallest number in the array) to the maximum index (holds the largest number in the array), and is displayed onto the GUI
            for (int i = 0; i < numbersArray.length; i++) {
                txtSortedNumbers.append(numbersArray[i] + "\n");
            }
        }
        // if the user presses the Descending button: 
        else if (rbtnDescending.isSelected()) {
            // a for loop is used to iterate through the array starting from the maximum index (holds the largest number in the array) to the 0th index (holds the smallest number in the array), and is displayed onto the GUI
            for (int i = numbersArray.length - 1; i >= 0; i--) {
                txtSortedNumbers.append(numbersArray[i] + "\n");
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(U3A2_IfraInam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(U3A2_IfraInam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(U3A2_IfraInam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(U3A2_IfraInam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new U3A2_IfraInam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSortNumbers;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblNumToSort;
    private javax.swing.JLabel lblOriginalNumbers;
    private javax.swing.JLabel lblSortedNumbers;
    private javax.swing.JLabel lblSortingAlgorithm;
    private javax.swing.JLabel lblSortingRoutines;
    private javax.swing.JLabel lblnstructions;
    private javax.swing.JMenu menu1;
    private javax.swing.JMenu menu2;
    private javax.swing.JRadioButton rbtnAscending;
    private javax.swing.JRadioButton rbtnBubble;
    private javax.swing.JRadioButton rbtnDescending;
    private javax.swing.JRadioButton rbtnInsertion;
    private javax.swing.JRadioButton rbtnQuick;
    private javax.swing.JRadioButton rbtnSelection;
    private javax.swing.JTextField txtError;
    private javax.swing.JTextField txtNumToSort;
    private javax.swing.JTextArea txtOriginalNumbers;
    private javax.swing.JTextArea txtSortedNumbers;
    // End of variables declaration//GEN-END:variables

}
