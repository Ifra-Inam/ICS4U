
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Ifra Inam
 * ICS4UE
 * 2023-08-16
 * Mr.Diakoloukas 
 * Purpose of Program: When a user inputs a book's reference number, the title of the book is outputted 
 */

/**
 *
 * @author Ifra Inam
 */
public class U3A3_IfraInam extends javax.swing.JFrame {

    /**
     * Creates new form U3A3_IfraInam
     */
    public U3A3_IfraInam() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblChildrensClassics = new javax.swing.JLabel();
        lblIntro1 = new javax.swing.JLabel();
        lblReferenceNumber = new javax.swing.JLabel();
        btnFindIt = new javax.swing.JButton();
        lblLinearSearch = new javax.swing.JLabel();
        lblBinarySearch = new javax.swing.JLabel();
        txtLinearSearch = new javax.swing.JTextField();
        txtError = new javax.swing.JTextField();
        lblIntro2 = new javax.swing.JLabel();
        txtReferenceNumber = new javax.swing.JTextField();
        txtBinarySearch = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Children's Classics");

        lblChildrensClassics.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblChildrensClassics.setForeground(new java.awt.Color(255, 0, 0));
        lblChildrensClassics.setText("Children's Classics");

        lblIntro1.setText("This program will find the title of a book according to the library reference number. ");

        lblReferenceNumber.setFont(new java.awt.Font("Bodoni MT Black", 1, 12)); // NOI18N
        lblReferenceNumber.setText("ENTER THE REFERENCE #:");

        btnFindIt.setText("Find It!");
        btnFindIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindItActionPerformed(evt);
            }
        });

        lblLinearSearch.setText("Linear Search:");

        lblBinarySearch.setText("Binary Search:");

        lblIntro2.setText("The program will use a Binary Search and a Linear Search.");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblIntro2)
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtError, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLinearSearch)
                            .addComponent(lblBinarySearch))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBinarySearch)
                            .addComponent(txtLinearSearch)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblIntro1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(lblReferenceNumber)
                                .addGap(46, 46, 46)
                                .addComponent(txtReferenceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(btnFindIt))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(lblChildrensClassics)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblChildrensClassics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblIntro1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblIntro2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblReferenceNumber)
                    .addComponent(txtReferenceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(btnFindIt)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLinearSearch)
                    .addComponent(txtLinearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBinarySearch)
                    .addComponent(txtBinarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(txtError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // class that creates book objects from the BookList fle which will be stored into an arraylist 
    class Book {
        
        // required variables are declared 
        int referenceNumber; 
        String bookTitle; 
        
        // constructor that creates instances of the Book class
        Book (int referenceNumber, String bookTitle) {
            this.referenceNumber = referenceNumber; 
            this.bookTitle = bookTitle; 
        }
        
        // getter for referenceNumber
        public int getreferenceNumber() {
            return referenceNumber; 
        }
        
        // setter for referenceNumber
        public void setreferenceNumber(int referenceNumber) {
            this.referenceNumber = referenceNumber; 
        } 
        
        // getter for bookTitle
        public String getBookTitle() {
            return bookTitle; 
        }
        
        // setter for bookTitle
        public void setBookTitle(String bookTitle) {
            this.bookTitle = bookTitle; 
        } 
        
    }
    
    
    private void btnFindItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindItActionPerformed
        
        txtBinarySearch.setText(""); // clears the Error text field (removes error messages once the user has corrected their input)
        txtLinearSearch.setText(""); // clears the Linear Search text field every time the Find It button is pressed
        txtError.setText("");// clears the Binary Search text field every time the Find It button is pressed 
        
        ArrayList<Book> Books = new ArrayList<>(); // an arraylist used to store every book object created from the Book class

        try {
            try (BufferedReader reader = new BufferedReader(new FileReader ("src\\BookList.txt"))) {
                String line; // variable used to read each line of the file 
                ArrayList<String> attribute = new ArrayList<>(); // arraylist used to store two lines of the file (one line for the reference number, one line for the book title)
                // while loop used to read every line of the file 
                while((line = reader.readLine()) != null) { 
                    attribute.add(line); // a line of the file is added into the attribute arraylist
                    if (attribute.size() == 2) { // checks if the size of the attribute arraylist is 2 (since each book has 2 lines of information associated with it) 
                        Book book = new Book(Integer.parseInt(attribute.get(0)), attribute.get(1)); // an object of the Book class is made for each book using the indices of the attribute arraylist
                        Books.add(book); // the book object is added to the Books arraylist 
                        attribute.clear(); // the attribute arraylist is cleared (because the size becomes 0 again and more book objects can be created as the while loop continues)  
                    }
                }
                reader.close(); // closes the file 
            }  
        }
        // handles any exceptions that may occur while reading the file 
        catch (FileNotFoundException ex) {
            Logger.getLogger(U3A3_IfraInam.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (IOException ex) {
            Logger.getLogger(U3A3_IfraInam.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int findRefNum;
        try {
        String findRefNum_str = txtReferenceNumber.getText(); // gets the reference number that the user is searching for 
        findRefNum = Integer.parseInt(findRefNum_str); // converts the input into an integer 
        } 
        // checks if the user enters something other than an integer and outputs an error message to notify them
        catch (NumberFormatException e) {
            txtError.setText("Please enter an integer."); 
            return;
        }
        
        int[] refNums = new int[Books.size()]; // an array is created to store all the reference numbers in the Books arraylist
        // all the reference numbers in the Books arraylist are added to the refNums array using a for loop
        for (int i = 0; i < Books.size(); i++) { 
           refNums[i] = Books.get(i).getreferenceNumber();
        } 
       
        int index_BS = binarySearch(refNums, findRefNum); // gets the index of the reference number the user inputs in the refNums array using the binarySearch method
        // because refNums and Books have the same size/length, the indices will be the same, therefore, what ever the index of the reference number in the refNums array is, the associated book title in the Books arraylist will have the same index
        if (index_BS != -1) { 
            txtBinarySearch.setText(Books.get(index_BS).getBookTitle()); // the associated book title is outputted onto the Binary Search text field 
        } 
        // checks if the binarySearch method returns a -1 (meaning the reference number is not found within the array)
        else {
            txtError.setText("Not found."); // a message is outputted to notify the user 
        }
        
        int index_LS = linearSearch(refNums, findRefNum); // gets the index of the reference number the user inputs in the refNums array using the linearSearch method
        // if reference number is found, the title of the book is displayed
        if (index_LS != -1) {
            txtLinearSearch.setText(Books.get(index_LS).getBookTitle());
        }
        // if its not found, a message is displayed to notify the user 
        else {
            txtError.setText("Not found.");
        }
        
    }//GEN-LAST:event_btnFindItActionPerformed

    // method to search for a value using Binary Search
    private static int binarySearch(int[] numbers, int numberToFind) {
        int low = 0; // is set to the lowest index in the array 
        int high = numbers.length - 1; // is set to the highest index in the array
        while (low <= high) { // low must be less than or equal to high for the value to be present in the array
           int middlePosition = (low + high) / 2; // calculates the middle index of the array
           int middleNumber = numbers[middlePosition]; // gets the value of the midde index 
           if (numberToFind == middleNumber) { // if the value being search for is equal to the middle number of array, the index is returned 
               return middlePosition; 
           }
           if (numberToFind < middleNumber) { // if the value being searched for is less than the middle value 
               high = middlePosition - 1; // the values above the middele number are discarded and the search continues with the lower half of the array
           }
           else { // if the value being searched for is greater than the middle value 
               low = middlePosition + 1; // the values below the middele number are discarded and the search continues with the greater half of the array
           }
        }
        // if the value is not present within the array, a -1 is returned 
        return -1; 
    }
    
    // method to search for a value using Linear Search
    private static int linearSearch(int[] numbers, int numberToFind) {
        // a for loop is used to iterate through every index of the array and if the value at a certain index matches the value that is being searched for, it returns the index
        for (int i = 0; i < numbers.length; i++) {
            if (numbers[i] == (numberToFind)) {
                return i;
            }
        }
        // otherwise, a -1 is returned indicating the value is not present within the array 
        return -1;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(U3A3_IfraInam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(U3A3_IfraInam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(U3A3_IfraInam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(U3A3_IfraInam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new U3A3_IfraInam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFindIt;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblBinarySearch;
    private javax.swing.JLabel lblChildrensClassics;
    private javax.swing.JLabel lblIntro1;
    private javax.swing.JLabel lblIntro2;
    private javax.swing.JLabel lblLinearSearch;
    private javax.swing.JLabel lblReferenceNumber;
    private javax.swing.JTextField txtBinarySearch;
    private javax.swing.JTextField txtError;
    private javax.swing.JTextField txtLinearSearch;
    private javax.swing.JTextField txtReferenceNumber;
    // End of variables declaration//GEN-END:variables
}
